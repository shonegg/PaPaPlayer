package com.papi.player.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.papi.player.javabean.MediaBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MediaBean".
*/
public class MediaBeanDao extends AbstractDao<MediaBean, String> {

    public static final String TABLENAME = "MediaBean";

    /**
     * Properties of entity MediaBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Enter_id = new Property(0, String.class, "enter_id", true, "ENTER_ID");
        public final static Property Cover_url = new Property(1, String.class, "cover_url", false, "COVER_URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property CId = new Property(4, String.class, "cId", false, "C_ID");
        public final static Property CCode = new Property(5, String.class, "cCode", false, "C_CODE");
    };


    public MediaBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MediaBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MediaBean\" (" + //
                "\"ENTER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: enter_id
                "\"COVER_URL\" TEXT," + // 1: cover_url
                "\"NAME\" TEXT," + // 2: name
                "\"TIME\" TEXT," + // 3: time
                "\"C_ID\" TEXT," + // 4: cId
                "\"C_CODE\" TEXT);"); // 5: cCode
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MediaBean_ENTER_ID ON MediaBean" +
                " (\"ENTER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MediaBean\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MediaBean entity) {
        stmt.clearBindings();
 
        String enter_id = entity.getEnter_id();
        if (enter_id != null) {
            stmt.bindString(1, enter_id);
        }
 
        String cover_url = entity.getCover_url();
        if (cover_url != null) {
            stmt.bindString(2, cover_url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String cId = entity.getCId();
        if (cId != null) {
            stmt.bindString(5, cId);
        }
 
        String cCode = entity.getCCode();
        if (cCode != null) {
            stmt.bindString(6, cCode);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MediaBean readEntity(Cursor cursor, int offset) {
        MediaBean entity = new MediaBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // enter_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cover_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // cCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MediaBean entity, int offset) {
        entity.setEnter_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCover_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MediaBean entity, long rowId) {
        return entity.getEnter_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MediaBean entity) {
        if(entity != null) {
            return entity.getEnter_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
